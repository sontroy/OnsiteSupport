<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- Enable @Controller annotation support -->
	<mvc:annotation-driven />

	<!-- Map simple view name such as "test" into /WEB-INF/views/test.jsp -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- Scan classpath for annotations (eg: @Service, @Repository etc) -->
	<context:component-scan base-package="com.onsitesupport.dao" />
	<context:component-scan base-package="com.onsitesupport.service" />
	<context:component-scan base-package="com.onsitesupport.controller" />
	<context:component-scan base-package="com.onsitesupport.domain" />

	<!-- JDBC Data Source. It is assumed you have MySQL running on localhost 
		port 3306 with username root and blank password. Change below if it's not 
		the case -->
	<bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/pizzashop" />
		<property name="username" value="root" />
		<property name="password" value="" />
		<property name="validationQuery" value="SELECT 1" />
	</bean>


	<!-- EntityManager Factory that brings together the persistence unit, datasource, 
		and JPA Vendor -->
	<bean id="OnsiteSupport"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="OnsiteSupportDS" />
		<property name="persistenceUnitName" value="OnsiteSupport" />
		<property name="jpaVendorAdapter" ref="OnsiteSupportJPAVendorAdapter" />
		<property name="jpaPropertyMap">
			<map>
				<entry key="hibernate.transaction.manager_lookup_class"
					value="com.atomikos.icatch.jta.hibernate3.TransactionManagerLookup" />
				<entry key="hibernate.connection.release_mode" value="on_close" />
			</map>
		</property>
	</bean>

	<context:property-placeholder
		ignore-unresolvable="true" ignore-resource-not-found="true"
		location="classpath:onsitesupport-dao.properties,file:///${catalina.home}/conf/Catalina/localhost/onsitesupport-dao.properties" />

	<!-- Using Apache DBCP Data Sources -->
	<bean name="OnsiteSupportDS" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${AppGallery.connection.driver_class}" />
		<property name="username" value="${AppGallery.connection.username}" />
		<property name="password" value="${AppGallery.connection.password}" />
		<property name="url" value="${AppGallery.connection.url}" />
		<property name="maxIdle" value="${AppGallery.minPoolSize}" />
		<property name="maxActive" value="${AppGallery.maxPoolSize}" />
	</bean>

	<!-- Configure a JPA vendor adapter -->
	<bean id="OnsiteSupportJPAVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="showSql" value="${AppGallery.show_sql}" />
		<property name="generateDdl" value="${AppGallery.generateDdl}" />
		<property name="databasePlatform" value="${AppGallery.dialect}" />
	</bean>

	<!-- Activates annotation based transaction management -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- Configure the Spring framework to use JTA transactions from Atomikos -->
	<!-- Using Atomikos Transaction Manager -->
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close">
		<property name="forceShutdown" value="true" />
		<property name="startupTransactionService" value="true" />
		<property name="transactionTimeout" value="180" />
	</bean>

	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp" />

	<bean id="transactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager" ref="atomikosTransactionManager" />
		<property name="userTransaction" ref="atomikosUserTransaction" />
		<property name="transactionSynchronizationName" value="SYNCHRONIZATION_ON_ACTUAL_TRANSACTION" />
	</bean>
</beans>